---
import '@styles/main.scss';

import Footer from './Footer/Footer.astro';
import Header from './Header/Header.astro';

type Props = {
	title: string;
};

const { title } = Astro.props as Props;
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link rel="preload" as="image" href="keyboard.webp" type="image/webp" />
		<title>{title}</title>
	</head>
	<body>
		<div class="container">
			<Header />
			<main role="main">
				<slot />
			</main>
			<Footer />
		</div>
	</body>

	<style lang="scss">
		@import '@styles/main.scss';
		body {
			background-color: var(--background-primary-color);
		}
		.container {
			overflow: hidden;
			display: grid;
			grid-template-rows: auto 1fr auto;
			grid-template-columns: 100%;
			min-height: 100vh;
		}
	</style>
	<script>
		const animatedElements = document.querySelectorAll('.animated-element');

		const handleIntersect = (entries: IntersectionObserverEntry[]) => {
			console.log(entries);
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					// 要素がビューポートに表示された場合
					entry.target.classList.add('is-visible'); // アニメーションクラスを追加
				}
			});
		};

		// Intersection Observerの設定
		const options = {
			root: null, // ビューポートを基準とする
			rootMargin: '0px',
			threshold: 0.1 // 少しでも表示されたらトリガー
		};

		const observer = new IntersectionObserver(handleIntersect, options);

		animatedElements.forEach(element => {
			observer.observe(element);
		});
	</script>
</html>
